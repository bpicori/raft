// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: pkgs/dto/raft.proto

package dto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Define RPC messages
type RaftRPC struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Types that are valid to be assigned to Args:
	//
	//	*RaftRPC_RequestVoteArgs
	//	*RaftRPC_RequestVoteReply
	//	*RaftRPC_AppendEntriesArgs
	//	*RaftRPC_AppendEntriesReply
	//	*RaftRPC_ResponseClusterState
	Args          isRaftRPC_Args `protobuf_oneof:"args"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaftRPC) Reset() {
	*x = RaftRPC{}
	mi := &file_pkgs_dto_raft_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftRPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftRPC) ProtoMessage() {}

func (x *RaftRPC) ProtoReflect() protoreflect.Message {
	mi := &file_pkgs_dto_raft_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftRPC.ProtoReflect.Descriptor instead.
func (*RaftRPC) Descriptor() ([]byte, []int) {
	return file_pkgs_dto_raft_proto_rawDescGZIP(), []int{0}
}

func (x *RaftRPC) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RaftRPC) GetArgs() isRaftRPC_Args {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *RaftRPC) GetRequestVoteArgs() *RequestVoteArgs {
	if x != nil {
		if x, ok := x.Args.(*RaftRPC_RequestVoteArgs); ok {
			return x.RequestVoteArgs
		}
	}
	return nil
}

func (x *RaftRPC) GetRequestVoteReply() *RequestVoteReply {
	if x != nil {
		if x, ok := x.Args.(*RaftRPC_RequestVoteReply); ok {
			return x.RequestVoteReply
		}
	}
	return nil
}

func (x *RaftRPC) GetAppendEntriesArgs() *AppendEntriesArgs {
	if x != nil {
		if x, ok := x.Args.(*RaftRPC_AppendEntriesArgs); ok {
			return x.AppendEntriesArgs
		}
	}
	return nil
}

func (x *RaftRPC) GetAppendEntriesReply() *AppendEntriesReply {
	if x != nil {
		if x, ok := x.Args.(*RaftRPC_AppendEntriesReply); ok {
			return x.AppendEntriesReply
		}
	}
	return nil
}

func (x *RaftRPC) GetResponseClusterState() *ClusterState {
	if x != nil {
		if x, ok := x.Args.(*RaftRPC_ResponseClusterState); ok {
			return x.ResponseClusterState
		}
	}
	return nil
}

type isRaftRPC_Args interface {
	isRaftRPC_Args()
}

type RaftRPC_RequestVoteArgs struct {
	RequestVoteArgs *RequestVoteArgs `protobuf:"bytes,4,opt,name=requestVoteArgs,proto3,oneof"`
}

type RaftRPC_RequestVoteReply struct {
	RequestVoteReply *RequestVoteReply `protobuf:"bytes,5,opt,name=requestVoteReply,proto3,oneof"`
}

type RaftRPC_AppendEntriesArgs struct {
	AppendEntriesArgs *AppendEntriesArgs `protobuf:"bytes,6,opt,name=appendEntriesArgs,proto3,oneof"`
}

type RaftRPC_AppendEntriesReply struct {
	AppendEntriesReply *AppendEntriesReply `protobuf:"bytes,7,opt,name=appendEntriesReply,proto3,oneof"`
}

type RaftRPC_ResponseClusterState struct {
	ResponseClusterState *ClusterState `protobuf:"bytes,9,opt,name=responseClusterState,proto3,oneof"`
}

func (*RaftRPC_RequestVoteArgs) isRaftRPC_Args() {}

func (*RaftRPC_RequestVoteReply) isRaftRPC_Args() {}

func (*RaftRPC_AppendEntriesArgs) isRaftRPC_Args() {}

func (*RaftRPC_AppendEntriesReply) isRaftRPC_Args() {}

func (*RaftRPC_ResponseClusterState) isRaftRPC_Args() {}

type RequestVoteArgs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Term          int32                  `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	CandidateId   string                 `protobuf:"bytes,3,opt,name=candidateId,proto3" json:"candidateId,omitempty"`
	LastLogIndex  int32                  `protobuf:"varint,4,opt,name=lastLogIndex,proto3" json:"lastLogIndex,omitempty"`
	LastLogTerm   int32                  `protobuf:"varint,5,opt,name=lastLogTerm,proto3" json:"lastLogTerm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestVoteArgs) Reset() {
	*x = RequestVoteArgs{}
	mi := &file_pkgs_dto_raft_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestVoteArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVoteArgs) ProtoMessage() {}

func (x *RequestVoteArgs) ProtoReflect() protoreflect.Message {
	mi := &file_pkgs_dto_raft_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVoteArgs.ProtoReflect.Descriptor instead.
func (*RequestVoteArgs) Descriptor() ([]byte, []int) {
	return file_pkgs_dto_raft_proto_rawDescGZIP(), []int{1}
}

func (x *RequestVoteArgs) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *RequestVoteArgs) GetTerm() int32 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RequestVoteArgs) GetCandidateId() string {
	if x != nil {
		return x.CandidateId
	}
	return ""
}

func (x *RequestVoteArgs) GetLastLogIndex() int32 {
	if x != nil {
		return x.LastLogIndex
	}
	return 0
}

func (x *RequestVoteArgs) GetLastLogTerm() int32 {
	if x != nil {
		return x.LastLogTerm
	}
	return 0
}

type RequestVoteReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Term          int32                  `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	VoteGranted   bool                   `protobuf:"varint,3,opt,name=voteGranted,proto3" json:"voteGranted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestVoteReply) Reset() {
	*x = RequestVoteReply{}
	mi := &file_pkgs_dto_raft_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestVoteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestVoteReply) ProtoMessage() {}

func (x *RequestVoteReply) ProtoReflect() protoreflect.Message {
	mi := &file_pkgs_dto_raft_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestVoteReply.ProtoReflect.Descriptor instead.
func (*RequestVoteReply) Descriptor() ([]byte, []int) {
	return file_pkgs_dto_raft_proto_rawDescGZIP(), []int{2}
}

func (x *RequestVoteReply) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *RequestVoteReply) GetTerm() int32 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RequestVoteReply) GetVoteGranted() bool {
	if x != nil {
		return x.VoteGranted
	}
	return false
}

type LogEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Term          int32                  `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	Command       string                 `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	mi := &file_pkgs_dto_raft_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_pkgs_dto_raft_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_pkgs_dto_raft_proto_rawDescGZIP(), []int{3}
}

func (x *LogEntry) GetTerm() int32 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *LogEntry) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

type AppendEntriesArgs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Term          int32                  `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	LeaderId      string                 `protobuf:"bytes,3,opt,name=leaderId,proto3" json:"leaderId,omitempty"`
	PrevLogIndex  int32                  `protobuf:"varint,4,opt,name=prevLogIndex,proto3" json:"prevLogIndex,omitempty"`
	PrevLogTerm   int32                  `protobuf:"varint,5,opt,name=prevLogTerm,proto3" json:"prevLogTerm,omitempty"`
	Entries       []*LogEntry            `protobuf:"bytes,6,rep,name=entries,proto3" json:"entries,omitempty"`
	LeaderCommit  int32                  `protobuf:"varint,7,opt,name=leaderCommit,proto3" json:"leaderCommit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendEntriesArgs) Reset() {
	*x = AppendEntriesArgs{}
	mi := &file_pkgs_dto_raft_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendEntriesArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendEntriesArgs) ProtoMessage() {}

func (x *AppendEntriesArgs) ProtoReflect() protoreflect.Message {
	mi := &file_pkgs_dto_raft_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendEntriesArgs.ProtoReflect.Descriptor instead.
func (*AppendEntriesArgs) Descriptor() ([]byte, []int) {
	return file_pkgs_dto_raft_proto_rawDescGZIP(), []int{4}
}

func (x *AppendEntriesArgs) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *AppendEntriesArgs) GetTerm() int32 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *AppendEntriesArgs) GetLeaderId() string {
	if x != nil {
		return x.LeaderId
	}
	return ""
}

func (x *AppendEntriesArgs) GetPrevLogIndex() int32 {
	if x != nil {
		return x.PrevLogIndex
	}
	return 0
}

func (x *AppendEntriesArgs) GetPrevLogTerm() int32 {
	if x != nil {
		return x.PrevLogTerm
	}
	return 0
}

func (x *AppendEntriesArgs) GetEntries() []*LogEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *AppendEntriesArgs) GetLeaderCommit() int32 {
	if x != nil {
		return x.LeaderCommit
	}
	return 0
}

type AppendEntriesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Term          int32                  `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendEntriesReply) Reset() {
	*x = AppendEntriesReply{}
	mi := &file_pkgs_dto_raft_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendEntriesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendEntriesReply) ProtoMessage() {}

func (x *AppendEntriesReply) ProtoReflect() protoreflect.Message {
	mi := &file_pkgs_dto_raft_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendEntriesReply.ProtoReflect.Descriptor instead.
func (*AppendEntriesReply) Descriptor() ([]byte, []int) {
	return file_pkgs_dto_raft_proto_rawDescGZIP(), []int{5}
}

func (x *AppendEntriesReply) GetTerm() int32 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *AppendEntriesReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ClusterState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Leader        string                 `protobuf:"bytes,1,opt,name=leader,proto3" json:"leader,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterState) Reset() {
	*x = ClusterState{}
	mi := &file_pkgs_dto_raft_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterState) ProtoMessage() {}

func (x *ClusterState) ProtoReflect() protoreflect.Message {
	mi := &file_pkgs_dto_raft_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterState.ProtoReflect.Descriptor instead.
func (*ClusterState) Descriptor() ([]byte, []int) {
	return file_pkgs_dto_raft_proto_rawDescGZIP(), []int{6}
}

func (x *ClusterState) GetLeader() string {
	if x != nil {
		return x.Leader
	}
	return ""
}

var File_pkgs_dto_raft_proto protoreflect.FileDescriptor

const file_pkgs_dto_raft_proto_rawDesc = "" +
	"\n" +
	"\x13pkgs/dto/raft.proto\x12\x03dto\"\x88\x03\n" +
	"\aRaftRPC\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12@\n" +
	"\x0frequestVoteArgs\x18\x04 \x01(\v2\x14.dto.RequestVoteArgsH\x00R\x0frequestVoteArgs\x12C\n" +
	"\x10requestVoteReply\x18\x05 \x01(\v2\x15.dto.RequestVoteReplyH\x00R\x10requestVoteReply\x12F\n" +
	"\x11appendEntriesArgs\x18\x06 \x01(\v2\x16.dto.AppendEntriesArgsH\x00R\x11appendEntriesArgs\x12I\n" +
	"\x12appendEntriesReply\x18\a \x01(\v2\x17.dto.AppendEntriesReplyH\x00R\x12appendEntriesReply\x12G\n" +
	"\x14responseClusterState\x18\t \x01(\v2\x11.dto.ClusterStateH\x00R\x14responseClusterStateB\x06\n" +
	"\x04args\"\xa5\x01\n" +
	"\x0fRequestVoteArgs\x12\x16\n" +
	"\x06nodeId\x18\x01 \x01(\tR\x06nodeId\x12\x12\n" +
	"\x04term\x18\x02 \x01(\x05R\x04term\x12 \n" +
	"\vcandidateId\x18\x03 \x01(\tR\vcandidateId\x12\"\n" +
	"\flastLogIndex\x18\x04 \x01(\x05R\flastLogIndex\x12 \n" +
	"\vlastLogTerm\x18\x05 \x01(\x05R\vlastLogTerm\"`\n" +
	"\x10RequestVoteReply\x12\x16\n" +
	"\x06nodeId\x18\x01 \x01(\tR\x06nodeId\x12\x12\n" +
	"\x04term\x18\x02 \x01(\x05R\x04term\x12 \n" +
	"\vvoteGranted\x18\x03 \x01(\bR\vvoteGranted\"8\n" +
	"\bLogEntry\x12\x12\n" +
	"\x04term\x18\x01 \x01(\x05R\x04term\x12\x18\n" +
	"\acommand\x18\x02 \x01(\tR\acommand\"\xee\x01\n" +
	"\x11AppendEntriesArgs\x12\x16\n" +
	"\x06nodeId\x18\x01 \x01(\tR\x06nodeId\x12\x12\n" +
	"\x04term\x18\x02 \x01(\x05R\x04term\x12\x1a\n" +
	"\bleaderId\x18\x03 \x01(\tR\bleaderId\x12\"\n" +
	"\fprevLogIndex\x18\x04 \x01(\x05R\fprevLogIndex\x12 \n" +
	"\vprevLogTerm\x18\x05 \x01(\x05R\vprevLogTerm\x12'\n" +
	"\aentries\x18\x06 \x03(\v2\r.dto.LogEntryR\aentries\x12\"\n" +
	"\fleaderCommit\x18\a \x01(\x05R\fleaderCommit\"B\n" +
	"\x12AppendEntriesReply\x12\x12\n" +
	"\x04term\x18\x01 \x01(\x05R\x04term\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\"&\n" +
	"\fClusterState\x12\x16\n" +
	"\x06leader\x18\x01 \x01(\tR\x06leaderB\fZ\n" +
	"./pkgs/dtob\x06proto3"

var (
	file_pkgs_dto_raft_proto_rawDescOnce sync.Once
	file_pkgs_dto_raft_proto_rawDescData []byte
)

func file_pkgs_dto_raft_proto_rawDescGZIP() []byte {
	file_pkgs_dto_raft_proto_rawDescOnce.Do(func() {
		file_pkgs_dto_raft_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkgs_dto_raft_proto_rawDesc), len(file_pkgs_dto_raft_proto_rawDesc)))
	})
	return file_pkgs_dto_raft_proto_rawDescData
}

var file_pkgs_dto_raft_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_pkgs_dto_raft_proto_goTypes = []any{
	(*RaftRPC)(nil),            // 0: dto.RaftRPC
	(*RequestVoteArgs)(nil),    // 1: dto.RequestVoteArgs
	(*RequestVoteReply)(nil),   // 2: dto.RequestVoteReply
	(*LogEntry)(nil),           // 3: dto.LogEntry
	(*AppendEntriesArgs)(nil),  // 4: dto.AppendEntriesArgs
	(*AppendEntriesReply)(nil), // 5: dto.AppendEntriesReply
	(*ClusterState)(nil),       // 6: dto.ClusterState
}
var file_pkgs_dto_raft_proto_depIdxs = []int32{
	1, // 0: dto.RaftRPC.requestVoteArgs:type_name -> dto.RequestVoteArgs
	2, // 1: dto.RaftRPC.requestVoteReply:type_name -> dto.RequestVoteReply
	4, // 2: dto.RaftRPC.appendEntriesArgs:type_name -> dto.AppendEntriesArgs
	5, // 3: dto.RaftRPC.appendEntriesReply:type_name -> dto.AppendEntriesReply
	6, // 4: dto.RaftRPC.responseClusterState:type_name -> dto.ClusterState
	3, // 5: dto.AppendEntriesArgs.entries:type_name -> dto.LogEntry
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_pkgs_dto_raft_proto_init() }
func file_pkgs_dto_raft_proto_init() {
	if File_pkgs_dto_raft_proto != nil {
		return
	}
	file_pkgs_dto_raft_proto_msgTypes[0].OneofWrappers = []any{
		(*RaftRPC_RequestVoteArgs)(nil),
		(*RaftRPC_RequestVoteReply)(nil),
		(*RaftRPC_AppendEntriesArgs)(nil),
		(*RaftRPC_AppendEntriesReply)(nil),
		(*RaftRPC_ResponseClusterState)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkgs_dto_raft_proto_rawDesc), len(file_pkgs_dto_raft_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkgs_dto_raft_proto_goTypes,
		DependencyIndexes: file_pkgs_dto_raft_proto_depIdxs,
		MessageInfos:      file_pkgs_dto_raft_proto_msgTypes,
	}.Build()
	File_pkgs_dto_raft_proto = out.File
	file_pkgs_dto_raft_proto_goTypes = nil
	file_pkgs_dto_raft_proto_depIdxs = nil
}
