// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: pkgs/dto/raft.proto

package dto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Define RPC messages
type RaftRPC struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Types that are valid to be assigned to Args:
	//
	//	*RaftRPC_VoteRequest
	//	*RaftRPC_VoteResponse
	//	*RaftRPC_LogRequest
	//	*RaftRPC_LogResponse
	//	*RaftRPC_ResponseClusterState
	//	*RaftRPC_AddCommand
	Args          isRaftRPC_Args `protobuf_oneof:"args"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaftRPC) Reset() {
	*x = RaftRPC{}
	mi := &file_pkgs_dto_raft_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftRPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftRPC) ProtoMessage() {}

func (x *RaftRPC) ProtoReflect() protoreflect.Message {
	mi := &file_pkgs_dto_raft_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftRPC.ProtoReflect.Descriptor instead.
func (*RaftRPC) Descriptor() ([]byte, []int) {
	return file_pkgs_dto_raft_proto_rawDescGZIP(), []int{0}
}

func (x *RaftRPC) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RaftRPC) GetArgs() isRaftRPC_Args {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *RaftRPC) GetVoteRequest() *VoteRequest {
	if x != nil {
		if x, ok := x.Args.(*RaftRPC_VoteRequest); ok {
			return x.VoteRequest
		}
	}
	return nil
}

func (x *RaftRPC) GetVoteResponse() *VoteResponse {
	if x != nil {
		if x, ok := x.Args.(*RaftRPC_VoteResponse); ok {
			return x.VoteResponse
		}
	}
	return nil
}

func (x *RaftRPC) GetLogRequest() *LogRequest {
	if x != nil {
		if x, ok := x.Args.(*RaftRPC_LogRequest); ok {
			return x.LogRequest
		}
	}
	return nil
}

func (x *RaftRPC) GetLogResponse() *LogResponse {
	if x != nil {
		if x, ok := x.Args.(*RaftRPC_LogResponse); ok {
			return x.LogResponse
		}
	}
	return nil
}

func (x *RaftRPC) GetResponseClusterState() *ClusterState {
	if x != nil {
		if x, ok := x.Args.(*RaftRPC_ResponseClusterState); ok {
			return x.ResponseClusterState
		}
	}
	return nil
}

func (x *RaftRPC) GetAddCommand() *AddCommand {
	if x != nil {
		if x, ok := x.Args.(*RaftRPC_AddCommand); ok {
			return x.AddCommand
		}
	}
	return nil
}

type isRaftRPC_Args interface {
	isRaftRPC_Args()
}

type RaftRPC_VoteRequest struct {
	VoteRequest *VoteRequest `protobuf:"bytes,4,opt,name=voteRequest,proto3,oneof"`
}

type RaftRPC_VoteResponse struct {
	VoteResponse *VoteResponse `protobuf:"bytes,5,opt,name=voteResponse,proto3,oneof"`
}

type RaftRPC_LogRequest struct {
	LogRequest *LogRequest `protobuf:"bytes,6,opt,name=logRequest,proto3,oneof"`
}

type RaftRPC_LogResponse struct {
	LogResponse *LogResponse `protobuf:"bytes,7,opt,name=logResponse,proto3,oneof"`
}

type RaftRPC_ResponseClusterState struct {
	ResponseClusterState *ClusterState `protobuf:"bytes,9,opt,name=responseClusterState,proto3,oneof"`
}

type RaftRPC_AddCommand struct {
	AddCommand *AddCommand `protobuf:"bytes,10,opt,name=addCommand,proto3,oneof"`
}

func (*RaftRPC_VoteRequest) isRaftRPC_Args() {}

func (*RaftRPC_VoteResponse) isRaftRPC_Args() {}

func (*RaftRPC_LogRequest) isRaftRPC_Args() {}

func (*RaftRPC_LogResponse) isRaftRPC_Args() {}

func (*RaftRPC_ResponseClusterState) isRaftRPC_Args() {}

func (*RaftRPC_AddCommand) isRaftRPC_Args() {}

type VoteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Term          int32                  `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	CandidateId   string                 `protobuf:"bytes,3,opt,name=candidateId,proto3" json:"candidateId,omitempty"`
	LastLogIndex  int32                  `protobuf:"varint,4,opt,name=lastLogIndex,proto3" json:"lastLogIndex,omitempty"`
	LastLogTerm   int32                  `protobuf:"varint,5,opt,name=lastLogTerm,proto3" json:"lastLogTerm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VoteRequest) Reset() {
	*x = VoteRequest{}
	mi := &file_pkgs_dto_raft_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteRequest) ProtoMessage() {}

func (x *VoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkgs_dto_raft_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteRequest.ProtoReflect.Descriptor instead.
func (*VoteRequest) Descriptor() ([]byte, []int) {
	return file_pkgs_dto_raft_proto_rawDescGZIP(), []int{1}
}

func (x *VoteRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *VoteRequest) GetTerm() int32 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *VoteRequest) GetCandidateId() string {
	if x != nil {
		return x.CandidateId
	}
	return ""
}

func (x *VoteRequest) GetLastLogIndex() int32 {
	if x != nil {
		return x.LastLogIndex
	}
	return 0
}

func (x *VoteRequest) GetLastLogTerm() int32 {
	if x != nil {
		return x.LastLogTerm
	}
	return 0
}

type VoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Term          int32                  `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	VoteGranted   bool                   `protobuf:"varint,3,opt,name=voteGranted,proto3" json:"voteGranted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VoteResponse) Reset() {
	*x = VoteResponse{}
	mi := &file_pkgs_dto_raft_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteResponse) ProtoMessage() {}

func (x *VoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkgs_dto_raft_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteResponse.ProtoReflect.Descriptor instead.
func (*VoteResponse) Descriptor() ([]byte, []int) {
	return file_pkgs_dto_raft_proto_rawDescGZIP(), []int{2}
}

func (x *VoteResponse) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *VoteResponse) GetTerm() int32 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *VoteResponse) GetVoteGranted() bool {
	if x != nil {
		return x.VoteGranted
	}
	return false
}

type LogEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Term          int32                  `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	Command       string                 `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	mi := &file_pkgs_dto_raft_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_pkgs_dto_raft_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_pkgs_dto_raft_proto_rawDescGZIP(), []int{3}
}

func (x *LogEntry) GetTerm() int32 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *LogEntry) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

type LogRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LeaderId      string                 `protobuf:"bytes,1,opt,name=leaderId,proto3" json:"leaderId,omitempty"`
	Term          int32                  `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	PrefixLength  int32                  `protobuf:"varint,3,opt,name=prefixLength,proto3" json:"prefixLength,omitempty"`
	PrefixTerm    int32                  `protobuf:"varint,4,opt,name=prefixTerm,proto3" json:"prefixTerm,omitempty"`
	LeaderCommit  int32                  `protobuf:"varint,5,opt,name=leaderCommit,proto3" json:"leaderCommit,omitempty"`
	Suffix        []*LogEntry            `protobuf:"bytes,6,rep,name=suffix,proto3" json:"suffix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogRequest) Reset() {
	*x = LogRequest{}
	mi := &file_pkgs_dto_raft_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRequest) ProtoMessage() {}

func (x *LogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkgs_dto_raft_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRequest.ProtoReflect.Descriptor instead.
func (*LogRequest) Descriptor() ([]byte, []int) {
	return file_pkgs_dto_raft_proto_rawDescGZIP(), []int{4}
}

func (x *LogRequest) GetLeaderId() string {
	if x != nil {
		return x.LeaderId
	}
	return ""
}

func (x *LogRequest) GetTerm() int32 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *LogRequest) GetPrefixLength() int32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *LogRequest) GetPrefixTerm() int32 {
	if x != nil {
		return x.PrefixTerm
	}
	return 0
}

func (x *LogRequest) GetLeaderCommit() int32 {
	if x != nil {
		return x.LeaderCommit
	}
	return 0
}

func (x *LogRequest) GetSuffix() []*LogEntry {
	if x != nil {
		return x.Suffix
	}
	return nil
}

type LogResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FollowerId    string                 `protobuf:"bytes,1,opt,name=followerId,proto3" json:"followerId,omitempty"`
	Term          int32                  `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	Ack           int32                  `protobuf:"varint,3,opt,name=ack,proto3" json:"ack,omitempty"`
	Success       bool                   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogResponse) Reset() {
	*x = LogResponse{}
	mi := &file_pkgs_dto_raft_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogResponse) ProtoMessage() {}

func (x *LogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkgs_dto_raft_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogResponse.ProtoReflect.Descriptor instead.
func (*LogResponse) Descriptor() ([]byte, []int) {
	return file_pkgs_dto_raft_proto_rawDescGZIP(), []int{5}
}

func (x *LogResponse) GetFollowerId() string {
	if x != nil {
		return x.FollowerId
	}
	return ""
}

func (x *LogResponse) GetTerm() int32 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *LogResponse) GetAck() int32 {
	if x != nil {
		return x.Ack
	}
	return 0
}

func (x *LogResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ClusterState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	CurrentTerm   int32                  `protobuf:"varint,2,opt,name=currentTerm,proto3" json:"currentTerm,omitempty"`
	VotedFor      string                 `protobuf:"bytes,3,opt,name=votedFor,proto3" json:"votedFor,omitempty"`
	CurrentRole   int32                  `protobuf:"varint,4,opt,name=currentRole,proto3" json:"currentRole,omitempty"`
	CurrentLeader string                 `protobuf:"bytes,5,opt,name=currentLeader,proto3" json:"currentLeader,omitempty"`
	CommitLength  int32                  `protobuf:"varint,6,opt,name=commitLength,proto3" json:"commitLength,omitempty"`
	LogEntries    []*LogEntry            `protobuf:"bytes,7,rep,name=logEntries,proto3" json:"logEntries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterState) Reset() {
	*x = ClusterState{}
	mi := &file_pkgs_dto_raft_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterState) ProtoMessage() {}

func (x *ClusterState) ProtoReflect() protoreflect.Message {
	mi := &file_pkgs_dto_raft_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterState.ProtoReflect.Descriptor instead.
func (*ClusterState) Descriptor() ([]byte, []int) {
	return file_pkgs_dto_raft_proto_rawDescGZIP(), []int{6}
}

func (x *ClusterState) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ClusterState) GetCurrentTerm() int32 {
	if x != nil {
		return x.CurrentTerm
	}
	return 0
}

func (x *ClusterState) GetVotedFor() string {
	if x != nil {
		return x.VotedFor
	}
	return ""
}

func (x *ClusterState) GetCurrentRole() int32 {
	if x != nil {
		return x.CurrentRole
	}
	return 0
}

func (x *ClusterState) GetCurrentLeader() string {
	if x != nil {
		return x.CurrentLeader
	}
	return ""
}

func (x *ClusterState) GetCommitLength() int32 {
	if x != nil {
		return x.CommitLength
	}
	return 0
}

func (x *ClusterState) GetLogEntries() []*LogEntry {
	if x != nil {
		return x.LogEntries
	}
	return nil
}

type AddCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Command       string                 `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddCommand) Reset() {
	*x = AddCommand{}
	mi := &file_pkgs_dto_raft_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCommand) ProtoMessage() {}

func (x *AddCommand) ProtoReflect() protoreflect.Message {
	mi := &file_pkgs_dto_raft_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCommand.ProtoReflect.Descriptor instead.
func (*AddCommand) Descriptor() ([]byte, []int) {
	return file_pkgs_dto_raft_proto_rawDescGZIP(), []int{7}
}

func (x *AddCommand) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

var File_pkgs_dto_raft_proto protoreflect.FileDescriptor

const file_pkgs_dto_raft_proto_rawDesc = "" +
	"\n" +
	"\x13pkgs/dto/raft.proto\x12\x03dto\"\xf9\x02\n" +
	"\aRaftRPC\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x124\n" +
	"\vvoteRequest\x18\x04 \x01(\v2\x10.dto.VoteRequestH\x00R\vvoteRequest\x127\n" +
	"\fvoteResponse\x18\x05 \x01(\v2\x11.dto.VoteResponseH\x00R\fvoteResponse\x121\n" +
	"\n" +
	"logRequest\x18\x06 \x01(\v2\x0f.dto.LogRequestH\x00R\n" +
	"logRequest\x124\n" +
	"\vlogResponse\x18\a \x01(\v2\x10.dto.LogResponseH\x00R\vlogResponse\x12G\n" +
	"\x14responseClusterState\x18\t \x01(\v2\x11.dto.ClusterStateH\x00R\x14responseClusterState\x121\n" +
	"\n" +
	"addCommand\x18\n" +
	" \x01(\v2\x0f.dto.AddCommandH\x00R\n" +
	"addCommandB\x06\n" +
	"\x04args\"\xa1\x01\n" +
	"\vVoteRequest\x12\x16\n" +
	"\x06nodeId\x18\x01 \x01(\tR\x06nodeId\x12\x12\n" +
	"\x04term\x18\x02 \x01(\x05R\x04term\x12 \n" +
	"\vcandidateId\x18\x03 \x01(\tR\vcandidateId\x12\"\n" +
	"\flastLogIndex\x18\x04 \x01(\x05R\flastLogIndex\x12 \n" +
	"\vlastLogTerm\x18\x05 \x01(\x05R\vlastLogTerm\"\\\n" +
	"\fVoteResponse\x12\x16\n" +
	"\x06nodeId\x18\x01 \x01(\tR\x06nodeId\x12\x12\n" +
	"\x04term\x18\x02 \x01(\x05R\x04term\x12 \n" +
	"\vvoteGranted\x18\x03 \x01(\bR\vvoteGranted\"8\n" +
	"\bLogEntry\x12\x12\n" +
	"\x04term\x18\x01 \x01(\x05R\x04term\x12\x18\n" +
	"\acommand\x18\x02 \x01(\tR\acommand\"\xcb\x01\n" +
	"\n" +
	"LogRequest\x12\x1a\n" +
	"\bleaderId\x18\x01 \x01(\tR\bleaderId\x12\x12\n" +
	"\x04term\x18\x02 \x01(\x05R\x04term\x12\"\n" +
	"\fprefixLength\x18\x03 \x01(\x05R\fprefixLength\x12\x1e\n" +
	"\n" +
	"prefixTerm\x18\x04 \x01(\x05R\n" +
	"prefixTerm\x12\"\n" +
	"\fleaderCommit\x18\x05 \x01(\x05R\fleaderCommit\x12%\n" +
	"\x06suffix\x18\x06 \x03(\v2\r.dto.LogEntryR\x06suffix\"m\n" +
	"\vLogResponse\x12\x1e\n" +
	"\n" +
	"followerId\x18\x01 \x01(\tR\n" +
	"followerId\x12\x12\n" +
	"\x04term\x18\x02 \x01(\x05R\x04term\x12\x10\n" +
	"\x03ack\x18\x03 \x01(\x05R\x03ack\x12\x18\n" +
	"\asuccess\x18\x04 \x01(\bR\asuccess\"\xff\x01\n" +
	"\fClusterState\x12\x16\n" +
	"\x06nodeId\x18\x01 \x01(\tR\x06nodeId\x12 \n" +
	"\vcurrentTerm\x18\x02 \x01(\x05R\vcurrentTerm\x12\x1a\n" +
	"\bvotedFor\x18\x03 \x01(\tR\bvotedFor\x12 \n" +
	"\vcurrentRole\x18\x04 \x01(\x05R\vcurrentRole\x12$\n" +
	"\rcurrentLeader\x18\x05 \x01(\tR\rcurrentLeader\x12\"\n" +
	"\fcommitLength\x18\x06 \x01(\x05R\fcommitLength\x12-\n" +
	"\n" +
	"logEntries\x18\a \x03(\v2\r.dto.LogEntryR\n" +
	"logEntries\"&\n" +
	"\n" +
	"AddCommand\x12\x18\n" +
	"\acommand\x18\x01 \x01(\tR\acommandB\fZ\n" +
	"./pkgs/dtob\x06proto3"

var (
	file_pkgs_dto_raft_proto_rawDescOnce sync.Once
	file_pkgs_dto_raft_proto_rawDescData []byte
)

func file_pkgs_dto_raft_proto_rawDescGZIP() []byte {
	file_pkgs_dto_raft_proto_rawDescOnce.Do(func() {
		file_pkgs_dto_raft_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkgs_dto_raft_proto_rawDesc), len(file_pkgs_dto_raft_proto_rawDesc)))
	})
	return file_pkgs_dto_raft_proto_rawDescData
}

var file_pkgs_dto_raft_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_pkgs_dto_raft_proto_goTypes = []any{
	(*RaftRPC)(nil),      // 0: dto.RaftRPC
	(*VoteRequest)(nil),  // 1: dto.VoteRequest
	(*VoteResponse)(nil), // 2: dto.VoteResponse
	(*LogEntry)(nil),     // 3: dto.LogEntry
	(*LogRequest)(nil),   // 4: dto.LogRequest
	(*LogResponse)(nil),  // 5: dto.LogResponse
	(*ClusterState)(nil), // 6: dto.ClusterState
	(*AddCommand)(nil),   // 7: dto.AddCommand
}
var file_pkgs_dto_raft_proto_depIdxs = []int32{
	1, // 0: dto.RaftRPC.voteRequest:type_name -> dto.VoteRequest
	2, // 1: dto.RaftRPC.voteResponse:type_name -> dto.VoteResponse
	4, // 2: dto.RaftRPC.logRequest:type_name -> dto.LogRequest
	5, // 3: dto.RaftRPC.logResponse:type_name -> dto.LogResponse
	6, // 4: dto.RaftRPC.responseClusterState:type_name -> dto.ClusterState
	7, // 5: dto.RaftRPC.addCommand:type_name -> dto.AddCommand
	3, // 6: dto.LogRequest.suffix:type_name -> dto.LogEntry
	3, // 7: dto.ClusterState.logEntries:type_name -> dto.LogEntry
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_pkgs_dto_raft_proto_init() }
func file_pkgs_dto_raft_proto_init() {
	if File_pkgs_dto_raft_proto != nil {
		return
	}
	file_pkgs_dto_raft_proto_msgTypes[0].OneofWrappers = []any{
		(*RaftRPC_VoteRequest)(nil),
		(*RaftRPC_VoteResponse)(nil),
		(*RaftRPC_LogRequest)(nil),
		(*RaftRPC_LogResponse)(nil),
		(*RaftRPC_ResponseClusterState)(nil),
		(*RaftRPC_AddCommand)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkgs_dto_raft_proto_rawDesc), len(file_pkgs_dto_raft_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkgs_dto_raft_proto_goTypes,
		DependencyIndexes: file_pkgs_dto_raft_proto_depIdxs,
		MessageInfos:      file_pkgs_dto_raft_proto_msgTypes,
	}.Build()
	File_pkgs_dto_raft_proto = out.File
	file_pkgs_dto_raft_proto_goTypes = nil
	file_pkgs_dto_raft_proto_depIdxs = nil
}
