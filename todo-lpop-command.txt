## Protocol and Data Structure Setup
- [x] Add LpopCommand message to pkgs/dto/raft.proto with key field
- [x] Add LpopCommandRequest message to raft.proto with key field  
- [x] Add LpopCommandResponse message to raft.proto with element and error fields
- [x] Add lpopCommand field to Command oneof in raft.proto
- [x] Add lpopCommandRequest and lpopCommandResponse to RaftRPC oneof
- [x] Regenerate protobuf files using protoc command
- [x] Add LpopOp constant to pkgs/consts/consts.go CommandType enum
- [x] Add "LPOP" case to CommandType String() method in consts.go
- [x] Add "LPOP" case to MapStringToCommandType function in consts.go

## Event System Integration
- [x] Add LpopCommandEvent struct to pkgs/events/application_events.go
- [x] Add LpopCommandRequestChan field to EventManager struct
- [x] Initialize LpopCommandRequestChan in NewEventManager constructor
- [x] Add LpopCommand case to RaftRPCType enum in consts.go
- [x] Add "LpopCommand" case to RaftRPCType String() method
- [x] Add "LpopCommand" case to MapStringToRPCType function

## Core Application Logic Implementation
- [x] Create pkgs/application/lpop.go file with main Lpop function
- [x] Implement validateLpopCommand function for input validation
- [x] Implement main Lpop function following lpush pattern with event handling
- [x] Implement replicateLpopCommand function for state machine replication
- [x] Add error handling for empty lists (return nil element, no error)
- [x] Add error handling for non-existent keys (return nil element, no error)
- [x] Handle JSON unmarshaling and marshaling for list storage
- [x] Implement proper list element removal from left side (index 0)
- [x] Add timeout handling for consensus operations

## Application Integration
- [x] Add lpopCommandEvent case to main select loop in pkgs/application/application.go
- [x] Add LpopOp case to replicateLogEntry switch statement
- [x] Import lpop functions in application.go
- [x] Test application integration with existing raft consensus

## Client Command Implementation  
- [x] Create cmd/client/commands/lpop.go file
- [x] Implement lpop CLI command following existing command patterns
- [x] Add proper error handling and output formatting
- [x] Add lpop command registration to client main.go
- [x] Test client command execution and response handling

## Server Integration
- [x] Add lpop command handling to server RPC message processing
- [x] Integrate lpop command with existing TCP/HTTP server infrastructure
- [x] Add proper routing for lpop commands from external clients
- [x] Test end-to-end lpop command execution through server

## Testing and Validation
- [x] Write unit tests for lpop application logic
- [x] Write unit tests for lpop command validation
- [x] Write integration tests for lpop with raft consensus
- [x] Test lpop behavior with empty lists
- [x] Test lpop behavior with non-existent keys  
- [x] Test lpop behavior with single-element lists
- [x] Test lpop behavior with multi-element lists
- [x] Test lpop command through client CLI
- [x] Test lpop command through server endpoints
- [x] Verify proper replication across raft cluster nodes

## Documentation and Cleanup
- [x] Add lpop command documentation to README.md
- [x] Add code comments explaining lpop implementation details
- [x] Verify all new code follows existing project patterns
- [x] Run linting and formatting tools on new code
- [x] Update any relevant API documentation 